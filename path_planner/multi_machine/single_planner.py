#!/usr/bin/env python
import numpy as np

def show(m):
    for row in m:
        for i in row:
#            if(i == 0):
#                i = ' '
            print('%3s' % str(i), end=',')
        print('', end='\r\n')
    print('----'*len(m[0]))

def color_show(m):
    for row in m:
        for i in row:
            if (type(i) == str):
                print('\033[0;35m%4s\033[0m'% i, end=',')
            elif i == 1:
                print('\033[0;33m%4s\033[0m'% i, end=',')
            else:
                print('%4s' % str(i), end=',')
        print('', end='\r\n')
    print('----'*len(m[0]))    

def get_heuristic(x_dim, y_dim, point):
    heuristic = np.zeros((x_dim, y_dim))
    for row in range(x_dim):
        for col in range(y_dim):
            heuristic[row][col] = abs(point[0] - row) + abs(point[1] - col)

    return heuristic

ori_to_coor = {'^':(-1,0), 'v':(1,0), '<':(0,-1), '>':(0,1)}
coor_to_ori = {(-1,0):'^', (1,0):'v', (0,-1):'<', (0,1):'>'}

#orientation_map2 = {'^':[(-1,0)], 'v':[(1,0)], '<':[(0,-1)], '>':[(0,1)], '<^>':[(0,-1),(-1,0),(0,1)],
#                    '<v':[(0,-1),(1,0)], '>v':[(0,1),(1,0)], '<^':[(0,-1),(-1,0)], '>^':[(0,1),(-1,0)]}

orientation_map2 = {'^':[(-1,0)], 'v':[(1,0)], '<':[(0,-1)], '>':[(0,1)], '<^>':[(0,-1),(-1,0),(0,1)],
                    '<v':[(0,-1),(1,0)], 'v^':[(1,0),(-1,0)],'v>':[(1,0),(0,1)], '<^':[(0,-1),(-1,0)], '^>':[(-1,0),(0,1)], '>v':[(1,0),(0,1)],'>^':[(0,1),(-1,0)],
                    'v^>':[(1,0),(-1,0),(0,1)], '<v^':[(0,-1),(1,0),(-1,0)], '<v>':[(0,-1),(1,0),(0,1)]}
        #0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20
grid = [[1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],#1
        [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],#2
        [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2],#3
        [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2],#4
        [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2],#5
        [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2],#6
        [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],#7
        [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],#8
        [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1],#9
        [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1],#10
        [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1],#11
        [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1],#12
        [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0],#13
        [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],#14
        [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],#15
        [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1],#16
        [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1],#17
        [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1],#18
        [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1],#19
        [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0],#20
        [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],#21
        [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]]#22

        #0   1   2   3   4    5   6   7    8   9   10   11  12  13   14   15  16  17  18  19  20
orie = [[0,  0,  0,  0,  0,   0,  0,  0,   0,  0,  0,   0,  0,  0,   0,   0,    0,   0,  0,  0,  0], #0
        [0, 'v','<','<','<v','<','<','<v','<','<','<v','<','<','<v','<', '<',  '<', '<','<','<', 0],
        [0, 'v', 0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,   0,   '^',  0,  0, '^', 0],
        [0, 'v', 0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,   0,   '^',  0,  0, '^', 0],
        [0, 'v', 0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,   0,   '^',  0,  0, '^', 0],
        [0, 'v', 0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,   0,   '^',  0,  0, '^', 0], #5
        [0,'>v','>','>','>v','>','>','>v','>','>','>v','>','>','>v','>', '>', '>^', '>','>','^', 0],
        [0, 'v','<','<','<v','<','<','<v','<','<','<v','<','<','<v','<','<^','<^>', '>','>','^', 0],
        [0, 'v', 0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  '^',  '^',  0,  0,  0,  0],
        [0, 'v', 0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  '^',  '^',  0,  0,  0,  0],
        [0, 'v', 0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  '^',  '^',  0,  0,  0,  0], #10
        [0, 'v', 0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  '^',  '^',  0,  0,  0,  0],
        [0, 'v', 0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  '^',  '^', '<','<','<','<'],
        [0,'>v','>','>','>v','>','>','>v','>','>','>v','>','>','>v','>','>^', '>^', '>','>','>','^'],
        [0, 'v','<','<','<v','<','<','<v','<','<','<v','<','<','<v','<','<^',  '<',  0,  0,  0,  0],
        [0, 'v', 0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  '^',  '^',  0,  0,  0,  0], #15
        [0, 'v', 0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  '^',  '^',  0,  0,  0,  0],
        [0, 'v', 0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  '^',  '^',  0,  0,  0,  0],
        [0, 'v', 0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  '^',  '^',  0,  0,  0,  0],
        [0, 'v', 0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  0, 'v',  0,  '^',  '^', '<','<','<','<'],
        [0,'>', '>','>','>' ,'>','>','>', '>','>','>', '>','>','>', '>','>^', '>^', '>','>','>','^'], #20
        [0,  0,  0,  0,  0,   0,  0,  0,   0,  0,  0,   0,  0,  0,   0,   0,    0,   0,  0,  0,  0]]


init1 = [1, 1]
goal1 = [16, 16]
delta = [[-1, 0], # up
         [0, -1], # left
         [1, 0],  # down
         [0, 1]]  # right

delta_name = ['^', '<', 'v', '>'] 
cost = 1

def search(grid, init, goal, cost):
    action = [[-1] * len(grid[0]) for i in grid]
    expand = [[-1] * len(grid[0]) for i in grid]
    closed = [[0] * len(grid[0]) for i in grid]
    closed[init[0]][init[1]] = 1

    x = init[0]
    y = init[1]
    g = 0
    orientation = grid[x][y]
    search_tree = [[g, x, y, orientation]]
    found = False
    resign = False
    count = 0

    while not found and not resign:
        if len(search_tree) == 0:
            resign = True
            return 'fail'
        else:
            search_tree.sort()
            next = search_tree.pop(0)
            g = next[0]
            x = next[1]
            y = next[2]
            orientation = next[3]
            expand[x][y] = count
            count += 1

            if x == goal[0] and y == goal[1]:
                found = True
            else:
                delta = orientation_map2[grid[x][y]]
                for i in delta:
                    next_orientation = coor_to_ori[i]
                    x2 = x + i[0]
                    y2 = y + i[1]
                    if closed[x2][y2] == 0:
                        if orientation == next_orientation:
                            cost = 1
                        else:
                            cost = 2
                        g2 = g + cost
                        search_tree.append([g2, x2, y2, next_orientation])
                        closed[x2][y2] = 1
                        action[x2][y2] = (x, y, next_orientation)

    
#    for row in action:
#        print(row)
    
    x = goal[0]
    y = goal[1]
    route = [(x,y,'*')]
    while x != init[0] or y != init[1]:
        x2 = action[x][y][0]
        y2 = action[x][y][1]
        land_mark = (x2, y2, action[x][y][2])
        route.insert(0,land_mark)
        x = x2
        y = y2
    
    '''
    x = goal[0]
    y = goal[1]
    route = {(x,y):'*'}
    while x != init[0] or y != init[1]:
        x2 = x - ori_to_coor[action[x][y]][0]
        y2 = y - ori_to_coor[action[x][y]][1]
        route[(x2,y2)] = action[x][y]
        x = x2
        y = y2
    '''
#    for i in route:
#        print(i)
    print(route)
search(orie, init1, goal1, cost)

           
